// 32位机器地址用4字节、64位机器地址用8字节

#include<stdio.h>
//int main(){
//	int a=10;
//	int *p=&a;
//	printf("%d\n",*p);  必须打印*p才有意义
//	return 0;
//}

//  多行注释的快捷键是ctrl+/

//指针类型决定解引用操作时能够访问空间的大小
//int *p *p能够访问4个字节
//char *p 能访问1个
//double *p 能访问8个字节
//
//解应用时指向'字符的类型',应当选择合适的类型
//#include<stdio.h>
int main(){
	int a=0x11223344;
	int b=0x11223344;
	int *pa=&a;   //常整型
	char *pc=&b; //字符
	printf("%p\n",pa);
	printf("%p\n",pa+1);
	
	printf("%p\n",pc);
	printf("%p\n",pc+1);// 指针类型决定指针步长
	return 0;           //即向前一步或向后一步距离多大
}
//int *p p+1 向后移动4个字节
//char *p  p+1 向后1个（与其定义类型所占字节有关）

//int main(){
//	int arr[10]={0};
//	int *p=arr; //数组中首元素的地址
//    int i=1;
//	for(int i=0;i<=10;i++){
//		//TODO
//		*(p+1)=1;
//	}
//	return 0;// 若为char类型只能访问1个字节，int类型解引用可以访问4个
//             // 类型决定对指针解引用能操作几个字节	
//}

//野指针的概念是 指针指向位置是不可知（随机、不正确、没有明确限制）
// int a 局部变量不初始化默认值是随机值
// int *p；局部的指针变量，就被初始化为随机值（随机的地址）

//指针越界访问：当指针范围超出数组arr范围，p就是野指针

//int *test(){
//	int a=10;//局部变量，进范围创建，出范围了则销毁
//	int *b=&a;
//	return b;//a的地址取出来给p
//}
//int main(){
//	int *p=test();
//	*p=20;  //使用时此空间已不属于程序  指针指向的空间被释放
//	return 0;
//	
//}
